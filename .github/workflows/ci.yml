name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: kacg-cicd-app

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: temurin
          cache: gradle

      # Gradle wrapper 실행 권한 부여
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew clean build -x test --no-daemon

      # Docker 빌드
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:latest .

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          region: ap-northeast-2

      # Docker 태그
      - name: Tag Docker image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:latest ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.IMAGE_NAME }}:latest

      # Docker Push
      - name: Push to ECR
        run: |
          docker push ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.IMAGE_NAME }}:latest

      # EC2 접속 후 배포
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 기존 컨테이너 중지 및 삭제
            docker stop ${{ env.IMAGE_NAME }} || true
            docker rm ${{ env.IMAGE_NAME }} || true

            # 최신 이미지 pull
            docker pull ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.IMAGE_NAME }}:latest

            # 환경변수 설정
            export JWT_SECRET_KEY=$(aws ssm get-parameter --name "/kacg-cicd/jwt-secret" --with-decryption --query "Parameter.Value" --output text)
            export DB_USER=$(aws ssm get-parameter --name "/kacg-cicd/db/username" --with-decryption --query "Parameter.Value" --output text)
            export DB_PASS=$(aws ssm get-parameter --name "/kacg-cicd/db/password" --with-decryption --query "Parameter.Value" --output text)
            export DB_HOST=$(aws ssm get-parameter --name "/kacg-cicd/db/endpoint" --with-decryption --query "Parameter.Value" --output text)
            export DB_PORT=$(aws ssm get-parameter --name "/kacg-cicd/db/port" --with-decryption --query "Parameter.Value" --output text)
            export DB_NAME=$(aws ssm get-parameter --name "/kacg-cicd/db/dbname" --with-decryption --query "Parameter.Value" --output text)

            # 컨테이너 실행
            docker run -d \
              --name ${{ env.IMAGE_NAME }} \
              -p 8080:8080 \
              -e DB_USER=$DB_USER \
              -e DB_PASS=$DB_PASS \
              -e DB_HOST=$DB_HOST \
              -e DB_PORT=$DB_PORT \
              -e DB_NAME=$DB_NAME \
              ${{ secrets.ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com/${{ env.IMAGE_NAME }}:latest
